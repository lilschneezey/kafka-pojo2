/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.schneezey.pojo;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestSubPojo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5164102363361950093L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestSubPojo\",\"namespace\":\"io.schneezey.pojo\",\"fields\":[{\"name\":\"subPFloat\",\"type\":\"float\"},{\"name\":\"subPDouble\",\"type\":\"double\"},{\"name\":\"subPInt\",\"type\":\"int\"},{\"name\":\"subPLong\",\"type\":\"long\"},{\"name\":\"subPBoolean\",\"type\":\"boolean\"},{\"name\":\"subPBytes\",\"type\":{\"type\":\"bytes\",\"java-class\":\"[B\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestSubPojo> ENCODER =
      new BinaryMessageEncoder<TestSubPojo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestSubPojo> DECODER =
      new BinaryMessageDecoder<TestSubPojo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TestSubPojo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TestSubPojo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestSubPojo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TestSubPojo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TestSubPojo from a ByteBuffer. */
  public static TestSubPojo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private float subPFloat;
   private double subPDouble;
   private int subPInt;
   private long subPLong;
   private boolean subPBoolean;
   private java.nio.ByteBuffer subPBytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestSubPojo() {}

  /**
   * All-args constructor.
   * @param subPFloat The new value for subPFloat
   * @param subPDouble The new value for subPDouble
   * @param subPInt The new value for subPInt
   * @param subPLong The new value for subPLong
   * @param subPBoolean The new value for subPBoolean
   * @param subPBytes The new value for subPBytes
   */
  public TestSubPojo(java.lang.Float subPFloat, java.lang.Double subPDouble, java.lang.Integer subPInt, java.lang.Long subPLong, java.lang.Boolean subPBoolean, java.nio.ByteBuffer subPBytes) {
    this.subPFloat = subPFloat;
    this.subPDouble = subPDouble;
    this.subPInt = subPInt;
    this.subPLong = subPLong;
    this.subPBoolean = subPBoolean;
    this.subPBytes = subPBytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return subPFloat;
    case 1: return subPDouble;
    case 2: return subPInt;
    case 3: return subPLong;
    case 4: return subPBoolean;
    case 5: return subPBytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: subPFloat = (java.lang.Float)value$; break;
    case 1: subPDouble = (java.lang.Double)value$; break;
    case 2: subPInt = (java.lang.Integer)value$; break;
    case 3: subPLong = (java.lang.Long)value$; break;
    case 4: subPBoolean = (java.lang.Boolean)value$; break;
    case 5: subPBytes = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'subPFloat' field.
   * @return The value of the 'subPFloat' field.
   */
  public java.lang.Float getSubPFloat() {
    return subPFloat;
  }

  /**
   * Sets the value of the 'subPFloat' field.
   * @param value the value to set.
   */
  public void setSubPFloat(java.lang.Float value) {
    this.subPFloat = value;
  }

  /**
   * Gets the value of the 'subPDouble' field.
   * @return The value of the 'subPDouble' field.
   */
  public java.lang.Double getSubPDouble() {
    return subPDouble;
  }

  /**
   * Sets the value of the 'subPDouble' field.
   * @param value the value to set.
   */
  public void setSubPDouble(java.lang.Double value) {
    this.subPDouble = value;
  }

  /**
   * Gets the value of the 'subPInt' field.
   * @return The value of the 'subPInt' field.
   */
  public java.lang.Integer getSubPInt() {
    return subPInt;
  }

  /**
   * Sets the value of the 'subPInt' field.
   * @param value the value to set.
   */
  public void setSubPInt(java.lang.Integer value) {
    this.subPInt = value;
  }

  /**
   * Gets the value of the 'subPLong' field.
   * @return The value of the 'subPLong' field.
   */
  public java.lang.Long getSubPLong() {
    return subPLong;
  }

  /**
   * Sets the value of the 'subPLong' field.
   * @param value the value to set.
   */
  public void setSubPLong(java.lang.Long value) {
    this.subPLong = value;
  }

  /**
   * Gets the value of the 'subPBoolean' field.
   * @return The value of the 'subPBoolean' field.
   */
  public java.lang.Boolean getSubPBoolean() {
    return subPBoolean;
  }

  /**
   * Sets the value of the 'subPBoolean' field.
   * @param value the value to set.
   */
  public void setSubPBoolean(java.lang.Boolean value) {
    this.subPBoolean = value;
  }

  /**
   * Gets the value of the 'subPBytes' field.
   * @return The value of the 'subPBytes' field.
   */
  public java.nio.ByteBuffer getSubPBytes() {
    return subPBytes;
  }

  /**
   * Sets the value of the 'subPBytes' field.
   * @param value the value to set.
   */
  public void setSubPBytes(java.nio.ByteBuffer value) {
    this.subPBytes = value;
  }

  /**
   * Creates a new TestSubPojo RecordBuilder.
   * @return A new TestSubPojo RecordBuilder
   */
  public static io.schneezey.pojo.TestSubPojo.Builder newBuilder() {
    return new io.schneezey.pojo.TestSubPojo.Builder();
  }

  /**
   * Creates a new TestSubPojo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestSubPojo RecordBuilder
   */
  public static io.schneezey.pojo.TestSubPojo.Builder newBuilder(io.schneezey.pojo.TestSubPojo.Builder other) {
    return new io.schneezey.pojo.TestSubPojo.Builder(other);
  }

  /**
   * Creates a new TestSubPojo RecordBuilder by copying an existing TestSubPojo instance.
   * @param other The existing instance to copy.
   * @return A new TestSubPojo RecordBuilder
   */
  public static io.schneezey.pojo.TestSubPojo.Builder newBuilder(io.schneezey.pojo.TestSubPojo other) {
    return new io.schneezey.pojo.TestSubPojo.Builder(other);
  }

  /**
   * RecordBuilder for TestSubPojo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestSubPojo>
    implements org.apache.avro.data.RecordBuilder<TestSubPojo> {

    private float subPFloat;
    private double subPDouble;
    private int subPInt;
    private long subPLong;
    private boolean subPBoolean;
    private java.nio.ByteBuffer subPBytes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.schneezey.pojo.TestSubPojo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.subPFloat)) {
        this.subPFloat = data().deepCopy(fields()[0].schema(), other.subPFloat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subPDouble)) {
        this.subPDouble = data().deepCopy(fields()[1].schema(), other.subPDouble);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subPInt)) {
        this.subPInt = data().deepCopy(fields()[2].schema(), other.subPInt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.subPLong)) {
        this.subPLong = data().deepCopy(fields()[3].schema(), other.subPLong);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subPBoolean)) {
        this.subPBoolean = data().deepCopy(fields()[4].schema(), other.subPBoolean);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subPBytes)) {
        this.subPBytes = data().deepCopy(fields()[5].schema(), other.subPBytes);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TestSubPojo instance
     * @param other The existing instance to copy.
     */
    private Builder(io.schneezey.pojo.TestSubPojo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.subPFloat)) {
        this.subPFloat = data().deepCopy(fields()[0].schema(), other.subPFloat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subPDouble)) {
        this.subPDouble = data().deepCopy(fields()[1].schema(), other.subPDouble);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subPInt)) {
        this.subPInt = data().deepCopy(fields()[2].schema(), other.subPInt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.subPLong)) {
        this.subPLong = data().deepCopy(fields()[3].schema(), other.subPLong);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subPBoolean)) {
        this.subPBoolean = data().deepCopy(fields()[4].schema(), other.subPBoolean);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subPBytes)) {
        this.subPBytes = data().deepCopy(fields()[5].schema(), other.subPBytes);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'subPFloat' field.
      * @return The value.
      */
    public java.lang.Float getSubPFloat() {
      return subPFloat;
    }

    /**
      * Sets the value of the 'subPFloat' field.
      * @param value The value of 'subPFloat'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder setSubPFloat(float value) {
      validate(fields()[0], value);
      this.subPFloat = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'subPFloat' field has been set.
      * @return True if the 'subPFloat' field has been set, false otherwise.
      */
    public boolean hasSubPFloat() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'subPFloat' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder clearSubPFloat() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subPDouble' field.
      * @return The value.
      */
    public java.lang.Double getSubPDouble() {
      return subPDouble;
    }

    /**
      * Sets the value of the 'subPDouble' field.
      * @param value The value of 'subPDouble'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder setSubPDouble(double value) {
      validate(fields()[1], value);
      this.subPDouble = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subPDouble' field has been set.
      * @return True if the 'subPDouble' field has been set, false otherwise.
      */
    public boolean hasSubPDouble() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subPDouble' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder clearSubPDouble() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'subPInt' field.
      * @return The value.
      */
    public java.lang.Integer getSubPInt() {
      return subPInt;
    }

    /**
      * Sets the value of the 'subPInt' field.
      * @param value The value of 'subPInt'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder setSubPInt(int value) {
      validate(fields()[2], value);
      this.subPInt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'subPInt' field has been set.
      * @return True if the 'subPInt' field has been set, false otherwise.
      */
    public boolean hasSubPInt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'subPInt' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder clearSubPInt() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'subPLong' field.
      * @return The value.
      */
    public java.lang.Long getSubPLong() {
      return subPLong;
    }

    /**
      * Sets the value of the 'subPLong' field.
      * @param value The value of 'subPLong'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder setSubPLong(long value) {
      validate(fields()[3], value);
      this.subPLong = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'subPLong' field has been set.
      * @return True if the 'subPLong' field has been set, false otherwise.
      */
    public boolean hasSubPLong() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'subPLong' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder clearSubPLong() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'subPBoolean' field.
      * @return The value.
      */
    public java.lang.Boolean getSubPBoolean() {
      return subPBoolean;
    }

    /**
      * Sets the value of the 'subPBoolean' field.
      * @param value The value of 'subPBoolean'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder setSubPBoolean(boolean value) {
      validate(fields()[4], value);
      this.subPBoolean = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'subPBoolean' field has been set.
      * @return True if the 'subPBoolean' field has been set, false otherwise.
      */
    public boolean hasSubPBoolean() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'subPBoolean' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder clearSubPBoolean() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'subPBytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getSubPBytes() {
      return subPBytes;
    }

    /**
      * Sets the value of the 'subPBytes' field.
      * @param value The value of 'subPBytes'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder setSubPBytes(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.subPBytes = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'subPBytes' field has been set.
      * @return True if the 'subPBytes' field has been set, false otherwise.
      */
    public boolean hasSubPBytes() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'subPBytes' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestSubPojo.Builder clearSubPBytes() {
      subPBytes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestSubPojo build() {
      try {
        TestSubPojo record = new TestSubPojo();
        record.subPFloat = fieldSetFlags()[0] ? this.subPFloat : (java.lang.Float) defaultValue(fields()[0]);
        record.subPDouble = fieldSetFlags()[1] ? this.subPDouble : (java.lang.Double) defaultValue(fields()[1]);
        record.subPInt = fieldSetFlags()[2] ? this.subPInt : (java.lang.Integer) defaultValue(fields()[2]);
        record.subPLong = fieldSetFlags()[3] ? this.subPLong : (java.lang.Long) defaultValue(fields()[3]);
        record.subPBoolean = fieldSetFlags()[4] ? this.subPBoolean : (java.lang.Boolean) defaultValue(fields()[4]);
        record.subPBytes = fieldSetFlags()[5] ? this.subPBytes : (java.nio.ByteBuffer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestSubPojo>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestSubPojo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestSubPojo>
    READER$ = (org.apache.avro.io.DatumReader<TestSubPojo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
