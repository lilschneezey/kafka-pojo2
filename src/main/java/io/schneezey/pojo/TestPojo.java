/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.schneezey.pojo;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestPojo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3692276588937046818L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestPojo\",\"namespace\":\"io.schneezey.pojo\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"testPFloat\",\"type\":\"float\"},{\"name\":\"testPDouble\",\"type\":\"double\"},{\"name\":\"testPInt\",\"type\":\"int\"},{\"name\":\"testPLong\",\"type\":\"long\"},{\"name\":\"testPBoolean\",\"type\":\"boolean\"},{\"name\":\"testPBytes\",\"type\":{\"type\":\"bytes\",\"java-class\":\"[B\"}},{\"name\":\"testNFloat\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"testNDouble\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"testNInt\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"testNLong\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"testNBoolean\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"testNBytes\",\"type\":[\"null\",{\"type\":\"bytes\",\"java-class\":\"[B\"}],\"default\":null},{\"name\":\"testN1Float\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"testN1Double\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"testN1Int\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"testN1Long\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"testN1Boolean\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"testN1Bytes\",\"type\":[\"null\",{\"type\":\"bytes\",\"java-class\":\"[B\"}],\"default\":null},{\"name\":\"testDate\",\"type\":{\"type\":\"long\",\"CustomEncoding\":\"DateAsLongEncoding\"}},{\"name\":\"testNDate\",\"type\":[\"null\",{\"type\":\"long\",\"CustomEncoding\":\"DateAsLongEncoding\"}],\"default\":null},{\"name\":\"testN1Date\",\"type\":[\"null\",{\"type\":\"long\",\"CustomEncoding\":\"DateAsLongEncoding\"}],\"default\":null},{\"name\":\"subPojos\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TestSubPojo\",\"fields\":[{\"name\":\"subPFloat\",\"type\":\"float\"},{\"name\":\"subPDouble\",\"type\":\"double\"},{\"name\":\"subPInt\",\"type\":\"int\"},{\"name\":\"subPLong\",\"type\":\"long\"},{\"name\":\"subPBoolean\",\"type\":\"boolean\"},{\"name\":\"subPBytes\",\"type\":{\"type\":\"bytes\",\"java-class\":\"[B\"}}]},\"java-class\":\"java.util.ArrayList\"}],\"default\":null},{\"name\":\"testenum\",\"type\":{\"type\":\"enum\",\"name\":\"TEST_ENUM\",\"symbols\":[\"TYPEA\",\"TYPEB\",\"TYPEC\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestPojo> ENCODER =
      new BinaryMessageEncoder<TestPojo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestPojo> DECODER =
      new BinaryMessageDecoder<TestPojo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TestPojo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TestPojo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestPojo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TestPojo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TestPojo from a ByteBuffer. */
  public static TestPojo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int id;
   private float testPFloat;
   private double testPDouble;
   private int testPInt;
   private long testPLong;
   private boolean testPBoolean;
   private java.nio.ByteBuffer testPBytes;
   private java.lang.Float testNFloat;
   private java.lang.Double testNDouble;
   private java.lang.Integer testNInt;
   private java.lang.Long testNLong;
   private java.lang.Boolean testNBoolean;
   private java.nio.ByteBuffer testNBytes;
   private java.lang.Float testN1Float;
   private java.lang.Double testN1Double;
   private java.lang.Integer testN1Int;
   private java.lang.Long testN1Long;
   private java.lang.Boolean testN1Boolean;
   private java.nio.ByteBuffer testN1Bytes;
   private long testDate;
   private java.lang.Long testNDate;
   private java.lang.Long testN1Date;
   private java.util.List<io.schneezey.pojo.TestSubPojo> subPojos;
   private io.schneezey.pojo.TEST_ENUM testenum;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestPojo() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param testPFloat The new value for testPFloat
   * @param testPDouble The new value for testPDouble
   * @param testPInt The new value for testPInt
   * @param testPLong The new value for testPLong
   * @param testPBoolean The new value for testPBoolean
   * @param testPBytes The new value for testPBytes
   * @param testNFloat The new value for testNFloat
   * @param testNDouble The new value for testNDouble
   * @param testNInt The new value for testNInt
   * @param testNLong The new value for testNLong
   * @param testNBoolean The new value for testNBoolean
   * @param testNBytes The new value for testNBytes
   * @param testN1Float The new value for testN1Float
   * @param testN1Double The new value for testN1Double
   * @param testN1Int The new value for testN1Int
   * @param testN1Long The new value for testN1Long
   * @param testN1Boolean The new value for testN1Boolean
   * @param testN1Bytes The new value for testN1Bytes
   * @param testDate The new value for testDate
   * @param testNDate The new value for testNDate
   * @param testN1Date The new value for testN1Date
   * @param subPojos The new value for subPojos
   * @param testenum The new value for testenum
   */
  public TestPojo(java.lang.Integer id, java.lang.Float testPFloat, java.lang.Double testPDouble, java.lang.Integer testPInt, java.lang.Long testPLong, java.lang.Boolean testPBoolean, java.nio.ByteBuffer testPBytes, java.lang.Float testNFloat, java.lang.Double testNDouble, java.lang.Integer testNInt, java.lang.Long testNLong, java.lang.Boolean testNBoolean, java.nio.ByteBuffer testNBytes, java.lang.Float testN1Float, java.lang.Double testN1Double, java.lang.Integer testN1Int, java.lang.Long testN1Long, java.lang.Boolean testN1Boolean, java.nio.ByteBuffer testN1Bytes, java.lang.Long testDate, java.lang.Long testNDate, java.lang.Long testN1Date, java.util.List<io.schneezey.pojo.TestSubPojo> subPojos, io.schneezey.pojo.TEST_ENUM testenum) {
    this.id = id;
    this.testPFloat = testPFloat;
    this.testPDouble = testPDouble;
    this.testPInt = testPInt;
    this.testPLong = testPLong;
    this.testPBoolean = testPBoolean;
    this.testPBytes = testPBytes;
    this.testNFloat = testNFloat;
    this.testNDouble = testNDouble;
    this.testNInt = testNInt;
    this.testNLong = testNLong;
    this.testNBoolean = testNBoolean;
    this.testNBytes = testNBytes;
    this.testN1Float = testN1Float;
    this.testN1Double = testN1Double;
    this.testN1Int = testN1Int;
    this.testN1Long = testN1Long;
    this.testN1Boolean = testN1Boolean;
    this.testN1Bytes = testN1Bytes;
    this.testDate = testDate;
    this.testNDate = testNDate;
    this.testN1Date = testN1Date;
    this.subPojos = subPojos;
    this.testenum = testenum;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return testPFloat;
    case 2: return testPDouble;
    case 3: return testPInt;
    case 4: return testPLong;
    case 5: return testPBoolean;
    case 6: return testPBytes;
    case 7: return testNFloat;
    case 8: return testNDouble;
    case 9: return testNInt;
    case 10: return testNLong;
    case 11: return testNBoolean;
    case 12: return testNBytes;
    case 13: return testN1Float;
    case 14: return testN1Double;
    case 15: return testN1Int;
    case 16: return testN1Long;
    case 17: return testN1Boolean;
    case 18: return testN1Bytes;
    case 19: return testDate;
    case 20: return testNDate;
    case 21: return testN1Date;
    case 22: return subPojos;
    case 23: return testenum;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: testPFloat = (java.lang.Float)value$; break;
    case 2: testPDouble = (java.lang.Double)value$; break;
    case 3: testPInt = (java.lang.Integer)value$; break;
    case 4: testPLong = (java.lang.Long)value$; break;
    case 5: testPBoolean = (java.lang.Boolean)value$; break;
    case 6: testPBytes = (java.nio.ByteBuffer)value$; break;
    case 7: testNFloat = (java.lang.Float)value$; break;
    case 8: testNDouble = (java.lang.Double)value$; break;
    case 9: testNInt = (java.lang.Integer)value$; break;
    case 10: testNLong = (java.lang.Long)value$; break;
    case 11: testNBoolean = (java.lang.Boolean)value$; break;
    case 12: testNBytes = (java.nio.ByteBuffer)value$; break;
    case 13: testN1Float = (java.lang.Float)value$; break;
    case 14: testN1Double = (java.lang.Double)value$; break;
    case 15: testN1Int = (java.lang.Integer)value$; break;
    case 16: testN1Long = (java.lang.Long)value$; break;
    case 17: testN1Boolean = (java.lang.Boolean)value$; break;
    case 18: testN1Bytes = (java.nio.ByteBuffer)value$; break;
    case 19: testDate = (java.lang.Long)value$; break;
    case 20: testNDate = (java.lang.Long)value$; break;
    case 21: testN1Date = (java.lang.Long)value$; break;
    case 22: subPojos = (java.util.List<io.schneezey.pojo.TestSubPojo>)value$; break;
    case 23: testenum = (io.schneezey.pojo.TEST_ENUM)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'testPFloat' field.
   * @return The value of the 'testPFloat' field.
   */
  public java.lang.Float getTestPFloat() {
    return testPFloat;
  }

  /**
   * Sets the value of the 'testPFloat' field.
   * @param value the value to set.
   */
  public void setTestPFloat(java.lang.Float value) {
    this.testPFloat = value;
  }

  /**
   * Gets the value of the 'testPDouble' field.
   * @return The value of the 'testPDouble' field.
   */
  public java.lang.Double getTestPDouble() {
    return testPDouble;
  }

  /**
   * Sets the value of the 'testPDouble' field.
   * @param value the value to set.
   */
  public void setTestPDouble(java.lang.Double value) {
    this.testPDouble = value;
  }

  /**
   * Gets the value of the 'testPInt' field.
   * @return The value of the 'testPInt' field.
   */
  public java.lang.Integer getTestPInt() {
    return testPInt;
  }

  /**
   * Sets the value of the 'testPInt' field.
   * @param value the value to set.
   */
  public void setTestPInt(java.lang.Integer value) {
    this.testPInt = value;
  }

  /**
   * Gets the value of the 'testPLong' field.
   * @return The value of the 'testPLong' field.
   */
  public java.lang.Long getTestPLong() {
    return testPLong;
  }

  /**
   * Sets the value of the 'testPLong' field.
   * @param value the value to set.
   */
  public void setTestPLong(java.lang.Long value) {
    this.testPLong = value;
  }

  /**
   * Gets the value of the 'testPBoolean' field.
   * @return The value of the 'testPBoolean' field.
   */
  public java.lang.Boolean getTestPBoolean() {
    return testPBoolean;
  }

  /**
   * Sets the value of the 'testPBoolean' field.
   * @param value the value to set.
   */
  public void setTestPBoolean(java.lang.Boolean value) {
    this.testPBoolean = value;
  }

  /**
   * Gets the value of the 'testPBytes' field.
   * @return The value of the 'testPBytes' field.
   */
  public java.nio.ByteBuffer getTestPBytes() {
    return testPBytes;
  }

  /**
   * Sets the value of the 'testPBytes' field.
   * @param value the value to set.
   */
  public void setTestPBytes(java.nio.ByteBuffer value) {
    this.testPBytes = value;
  }

  /**
   * Gets the value of the 'testNFloat' field.
   * @return The value of the 'testNFloat' field.
   */
  public java.lang.Float getTestNFloat() {
    return testNFloat;
  }

  /**
   * Sets the value of the 'testNFloat' field.
   * @param value the value to set.
   */
  public void setTestNFloat(java.lang.Float value) {
    this.testNFloat = value;
  }

  /**
   * Gets the value of the 'testNDouble' field.
   * @return The value of the 'testNDouble' field.
   */
  public java.lang.Double getTestNDouble() {
    return testNDouble;
  }

  /**
   * Sets the value of the 'testNDouble' field.
   * @param value the value to set.
   */
  public void setTestNDouble(java.lang.Double value) {
    this.testNDouble = value;
  }

  /**
   * Gets the value of the 'testNInt' field.
   * @return The value of the 'testNInt' field.
   */
  public java.lang.Integer getTestNInt() {
    return testNInt;
  }

  /**
   * Sets the value of the 'testNInt' field.
   * @param value the value to set.
   */
  public void setTestNInt(java.lang.Integer value) {
    this.testNInt = value;
  }

  /**
   * Gets the value of the 'testNLong' field.
   * @return The value of the 'testNLong' field.
   */
  public java.lang.Long getTestNLong() {
    return testNLong;
  }

  /**
   * Sets the value of the 'testNLong' field.
   * @param value the value to set.
   */
  public void setTestNLong(java.lang.Long value) {
    this.testNLong = value;
  }

  /**
   * Gets the value of the 'testNBoolean' field.
   * @return The value of the 'testNBoolean' field.
   */
  public java.lang.Boolean getTestNBoolean() {
    return testNBoolean;
  }

  /**
   * Sets the value of the 'testNBoolean' field.
   * @param value the value to set.
   */
  public void setTestNBoolean(java.lang.Boolean value) {
    this.testNBoolean = value;
  }

  /**
   * Gets the value of the 'testNBytes' field.
   * @return The value of the 'testNBytes' field.
   */
  public java.nio.ByteBuffer getTestNBytes() {
    return testNBytes;
  }

  /**
   * Sets the value of the 'testNBytes' field.
   * @param value the value to set.
   */
  public void setTestNBytes(java.nio.ByteBuffer value) {
    this.testNBytes = value;
  }

  /**
   * Gets the value of the 'testN1Float' field.
   * @return The value of the 'testN1Float' field.
   */
  public java.lang.Float getTestN1Float() {
    return testN1Float;
  }

  /**
   * Sets the value of the 'testN1Float' field.
   * @param value the value to set.
   */
  public void setTestN1Float(java.lang.Float value) {
    this.testN1Float = value;
  }

  /**
   * Gets the value of the 'testN1Double' field.
   * @return The value of the 'testN1Double' field.
   */
  public java.lang.Double getTestN1Double() {
    return testN1Double;
  }

  /**
   * Sets the value of the 'testN1Double' field.
   * @param value the value to set.
   */
  public void setTestN1Double(java.lang.Double value) {
    this.testN1Double = value;
  }

  /**
   * Gets the value of the 'testN1Int' field.
   * @return The value of the 'testN1Int' field.
   */
  public java.lang.Integer getTestN1Int() {
    return testN1Int;
  }

  /**
   * Sets the value of the 'testN1Int' field.
   * @param value the value to set.
   */
  public void setTestN1Int(java.lang.Integer value) {
    this.testN1Int = value;
  }

  /**
   * Gets the value of the 'testN1Long' field.
   * @return The value of the 'testN1Long' field.
   */
  public java.lang.Long getTestN1Long() {
    return testN1Long;
  }

  /**
   * Sets the value of the 'testN1Long' field.
   * @param value the value to set.
   */
  public void setTestN1Long(java.lang.Long value) {
    this.testN1Long = value;
  }

  /**
   * Gets the value of the 'testN1Boolean' field.
   * @return The value of the 'testN1Boolean' field.
   */
  public java.lang.Boolean getTestN1Boolean() {
    return testN1Boolean;
  }

  /**
   * Sets the value of the 'testN1Boolean' field.
   * @param value the value to set.
   */
  public void setTestN1Boolean(java.lang.Boolean value) {
    this.testN1Boolean = value;
  }

  /**
   * Gets the value of the 'testN1Bytes' field.
   * @return The value of the 'testN1Bytes' field.
   */
  public java.nio.ByteBuffer getTestN1Bytes() {
    return testN1Bytes;
  }

  /**
   * Sets the value of the 'testN1Bytes' field.
   * @param value the value to set.
   */
  public void setTestN1Bytes(java.nio.ByteBuffer value) {
    this.testN1Bytes = value;
  }

  /**
   * Gets the value of the 'testDate' field.
   * @return The value of the 'testDate' field.
   */
  public java.lang.Long getTestDate() {
    return testDate;
  }

  /**
   * Sets the value of the 'testDate' field.
   * @param value the value to set.
   */
  public void setTestDate(java.lang.Long value) {
    this.testDate = value;
  }

  /**
   * Gets the value of the 'testNDate' field.
   * @return The value of the 'testNDate' field.
   */
  public java.lang.Long getTestNDate() {
    return testNDate;
  }

  /**
   * Sets the value of the 'testNDate' field.
   * @param value the value to set.
   */
  public void setTestNDate(java.lang.Long value) {
    this.testNDate = value;
  }

  /**
   * Gets the value of the 'testN1Date' field.
   * @return The value of the 'testN1Date' field.
   */
  public java.lang.Long getTestN1Date() {
    return testN1Date;
  }

  /**
   * Sets the value of the 'testN1Date' field.
   * @param value the value to set.
   */
  public void setTestN1Date(java.lang.Long value) {
    this.testN1Date = value;
  }

  /**
   * Gets the value of the 'subPojos' field.
   * @return The value of the 'subPojos' field.
   */
  public java.util.List<io.schneezey.pojo.TestSubPojo> getSubPojos() {
    return subPojos;
  }

  /**
   * Sets the value of the 'subPojos' field.
   * @param value the value to set.
   */
  public void setSubPojos(java.util.List<io.schneezey.pojo.TestSubPojo> value) {
    this.subPojos = value;
  }

  /**
   * Gets the value of the 'testenum' field.
   * @return The value of the 'testenum' field.
   */
  public io.schneezey.pojo.TEST_ENUM getTestenum() {
    return testenum;
  }

  /**
   * Sets the value of the 'testenum' field.
   * @param value the value to set.
   */
  public void setTestenum(io.schneezey.pojo.TEST_ENUM value) {
    this.testenum = value;
  }

  /**
   * Creates a new TestPojo RecordBuilder.
   * @return A new TestPojo RecordBuilder
   */
  public static io.schneezey.pojo.TestPojo.Builder newBuilder() {
    return new io.schneezey.pojo.TestPojo.Builder();
  }

  /**
   * Creates a new TestPojo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestPojo RecordBuilder
   */
  public static io.schneezey.pojo.TestPojo.Builder newBuilder(io.schneezey.pojo.TestPojo.Builder other) {
    return new io.schneezey.pojo.TestPojo.Builder(other);
  }

  /**
   * Creates a new TestPojo RecordBuilder by copying an existing TestPojo instance.
   * @param other The existing instance to copy.
   * @return A new TestPojo RecordBuilder
   */
  public static io.schneezey.pojo.TestPojo.Builder newBuilder(io.schneezey.pojo.TestPojo other) {
    return new io.schneezey.pojo.TestPojo.Builder(other);
  }

  /**
   * RecordBuilder for TestPojo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestPojo>
    implements org.apache.avro.data.RecordBuilder<TestPojo> {

    private int id;
    private float testPFloat;
    private double testPDouble;
    private int testPInt;
    private long testPLong;
    private boolean testPBoolean;
    private java.nio.ByteBuffer testPBytes;
    private java.lang.Float testNFloat;
    private java.lang.Double testNDouble;
    private java.lang.Integer testNInt;
    private java.lang.Long testNLong;
    private java.lang.Boolean testNBoolean;
    private java.nio.ByteBuffer testNBytes;
    private java.lang.Float testN1Float;
    private java.lang.Double testN1Double;
    private java.lang.Integer testN1Int;
    private java.lang.Long testN1Long;
    private java.lang.Boolean testN1Boolean;
    private java.nio.ByteBuffer testN1Bytes;
    private long testDate;
    private java.lang.Long testNDate;
    private java.lang.Long testN1Date;
    private java.util.List<io.schneezey.pojo.TestSubPojo> subPojos;
    private io.schneezey.pojo.TEST_ENUM testenum;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.schneezey.pojo.TestPojo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.testPFloat)) {
        this.testPFloat = data().deepCopy(fields()[1].schema(), other.testPFloat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.testPDouble)) {
        this.testPDouble = data().deepCopy(fields()[2].schema(), other.testPDouble);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testPInt)) {
        this.testPInt = data().deepCopy(fields()[3].schema(), other.testPInt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.testPLong)) {
        this.testPLong = data().deepCopy(fields()[4].schema(), other.testPLong);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.testPBoolean)) {
        this.testPBoolean = data().deepCopy(fields()[5].schema(), other.testPBoolean);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.testPBytes)) {
        this.testPBytes = data().deepCopy(fields()[6].schema(), other.testPBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.testNFloat)) {
        this.testNFloat = data().deepCopy(fields()[7].schema(), other.testNFloat);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.testNDouble)) {
        this.testNDouble = data().deepCopy(fields()[8].schema(), other.testNDouble);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.testNInt)) {
        this.testNInt = data().deepCopy(fields()[9].schema(), other.testNInt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.testNLong)) {
        this.testNLong = data().deepCopy(fields()[10].schema(), other.testNLong);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.testNBoolean)) {
        this.testNBoolean = data().deepCopy(fields()[11].schema(), other.testNBoolean);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.testNBytes)) {
        this.testNBytes = data().deepCopy(fields()[12].schema(), other.testNBytes);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.testN1Float)) {
        this.testN1Float = data().deepCopy(fields()[13].schema(), other.testN1Float);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.testN1Double)) {
        this.testN1Double = data().deepCopy(fields()[14].schema(), other.testN1Double);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.testN1Int)) {
        this.testN1Int = data().deepCopy(fields()[15].schema(), other.testN1Int);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.testN1Long)) {
        this.testN1Long = data().deepCopy(fields()[16].schema(), other.testN1Long);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.testN1Boolean)) {
        this.testN1Boolean = data().deepCopy(fields()[17].schema(), other.testN1Boolean);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.testN1Bytes)) {
        this.testN1Bytes = data().deepCopy(fields()[18].schema(), other.testN1Bytes);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.testDate)) {
        this.testDate = data().deepCopy(fields()[19].schema(), other.testDate);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.testNDate)) {
        this.testNDate = data().deepCopy(fields()[20].schema(), other.testNDate);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.testN1Date)) {
        this.testN1Date = data().deepCopy(fields()[21].schema(), other.testN1Date);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.subPojos)) {
        this.subPojos = data().deepCopy(fields()[22].schema(), other.subPojos);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.testenum)) {
        this.testenum = data().deepCopy(fields()[23].schema(), other.testenum);
        fieldSetFlags()[23] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TestPojo instance
     * @param other The existing instance to copy.
     */
    private Builder(io.schneezey.pojo.TestPojo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.testPFloat)) {
        this.testPFloat = data().deepCopy(fields()[1].schema(), other.testPFloat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.testPDouble)) {
        this.testPDouble = data().deepCopy(fields()[2].schema(), other.testPDouble);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testPInt)) {
        this.testPInt = data().deepCopy(fields()[3].schema(), other.testPInt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.testPLong)) {
        this.testPLong = data().deepCopy(fields()[4].schema(), other.testPLong);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.testPBoolean)) {
        this.testPBoolean = data().deepCopy(fields()[5].schema(), other.testPBoolean);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.testPBytes)) {
        this.testPBytes = data().deepCopy(fields()[6].schema(), other.testPBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.testNFloat)) {
        this.testNFloat = data().deepCopy(fields()[7].schema(), other.testNFloat);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.testNDouble)) {
        this.testNDouble = data().deepCopy(fields()[8].schema(), other.testNDouble);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.testNInt)) {
        this.testNInt = data().deepCopy(fields()[9].schema(), other.testNInt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.testNLong)) {
        this.testNLong = data().deepCopy(fields()[10].schema(), other.testNLong);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.testNBoolean)) {
        this.testNBoolean = data().deepCopy(fields()[11].schema(), other.testNBoolean);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.testNBytes)) {
        this.testNBytes = data().deepCopy(fields()[12].schema(), other.testNBytes);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.testN1Float)) {
        this.testN1Float = data().deepCopy(fields()[13].schema(), other.testN1Float);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.testN1Double)) {
        this.testN1Double = data().deepCopy(fields()[14].schema(), other.testN1Double);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.testN1Int)) {
        this.testN1Int = data().deepCopy(fields()[15].schema(), other.testN1Int);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.testN1Long)) {
        this.testN1Long = data().deepCopy(fields()[16].schema(), other.testN1Long);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.testN1Boolean)) {
        this.testN1Boolean = data().deepCopy(fields()[17].schema(), other.testN1Boolean);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.testN1Bytes)) {
        this.testN1Bytes = data().deepCopy(fields()[18].schema(), other.testN1Bytes);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.testDate)) {
        this.testDate = data().deepCopy(fields()[19].schema(), other.testDate);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.testNDate)) {
        this.testNDate = data().deepCopy(fields()[20].schema(), other.testNDate);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.testN1Date)) {
        this.testN1Date = data().deepCopy(fields()[21].schema(), other.testN1Date);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.subPojos)) {
        this.subPojos = data().deepCopy(fields()[22].schema(), other.subPojos);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.testenum)) {
        this.testenum = data().deepCopy(fields()[23].schema(), other.testenum);
        fieldSetFlags()[23] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'testPFloat' field.
      * @return The value.
      */
    public java.lang.Float getTestPFloat() {
      return testPFloat;
    }

    /**
      * Sets the value of the 'testPFloat' field.
      * @param value The value of 'testPFloat'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestPFloat(float value) {
      validate(fields()[1], value);
      this.testPFloat = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'testPFloat' field has been set.
      * @return True if the 'testPFloat' field has been set, false otherwise.
      */
    public boolean hasTestPFloat() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'testPFloat' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestPFloat() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'testPDouble' field.
      * @return The value.
      */
    public java.lang.Double getTestPDouble() {
      return testPDouble;
    }

    /**
      * Sets the value of the 'testPDouble' field.
      * @param value The value of 'testPDouble'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestPDouble(double value) {
      validate(fields()[2], value);
      this.testPDouble = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'testPDouble' field has been set.
      * @return True if the 'testPDouble' field has been set, false otherwise.
      */
    public boolean hasTestPDouble() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'testPDouble' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestPDouble() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'testPInt' field.
      * @return The value.
      */
    public java.lang.Integer getTestPInt() {
      return testPInt;
    }

    /**
      * Sets the value of the 'testPInt' field.
      * @param value The value of 'testPInt'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestPInt(int value) {
      validate(fields()[3], value);
      this.testPInt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'testPInt' field has been set.
      * @return True if the 'testPInt' field has been set, false otherwise.
      */
    public boolean hasTestPInt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'testPInt' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestPInt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'testPLong' field.
      * @return The value.
      */
    public java.lang.Long getTestPLong() {
      return testPLong;
    }

    /**
      * Sets the value of the 'testPLong' field.
      * @param value The value of 'testPLong'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestPLong(long value) {
      validate(fields()[4], value);
      this.testPLong = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'testPLong' field has been set.
      * @return True if the 'testPLong' field has been set, false otherwise.
      */
    public boolean hasTestPLong() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'testPLong' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestPLong() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'testPBoolean' field.
      * @return The value.
      */
    public java.lang.Boolean getTestPBoolean() {
      return testPBoolean;
    }

    /**
      * Sets the value of the 'testPBoolean' field.
      * @param value The value of 'testPBoolean'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestPBoolean(boolean value) {
      validate(fields()[5], value);
      this.testPBoolean = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'testPBoolean' field has been set.
      * @return True if the 'testPBoolean' field has been set, false otherwise.
      */
    public boolean hasTestPBoolean() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'testPBoolean' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestPBoolean() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'testPBytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTestPBytes() {
      return testPBytes;
    }

    /**
      * Sets the value of the 'testPBytes' field.
      * @param value The value of 'testPBytes'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestPBytes(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.testPBytes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'testPBytes' field has been set.
      * @return True if the 'testPBytes' field has been set, false otherwise.
      */
    public boolean hasTestPBytes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'testPBytes' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestPBytes() {
      testPBytes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'testNFloat' field.
      * @return The value.
      */
    public java.lang.Float getTestNFloat() {
      return testNFloat;
    }

    /**
      * Sets the value of the 'testNFloat' field.
      * @param value The value of 'testNFloat'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestNFloat(java.lang.Float value) {
      validate(fields()[7], value);
      this.testNFloat = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'testNFloat' field has been set.
      * @return True if the 'testNFloat' field has been set, false otherwise.
      */
    public boolean hasTestNFloat() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'testNFloat' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestNFloat() {
      testNFloat = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'testNDouble' field.
      * @return The value.
      */
    public java.lang.Double getTestNDouble() {
      return testNDouble;
    }

    /**
      * Sets the value of the 'testNDouble' field.
      * @param value The value of 'testNDouble'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestNDouble(java.lang.Double value) {
      validate(fields()[8], value);
      this.testNDouble = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'testNDouble' field has been set.
      * @return True if the 'testNDouble' field has been set, false otherwise.
      */
    public boolean hasTestNDouble() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'testNDouble' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestNDouble() {
      testNDouble = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'testNInt' field.
      * @return The value.
      */
    public java.lang.Integer getTestNInt() {
      return testNInt;
    }

    /**
      * Sets the value of the 'testNInt' field.
      * @param value The value of 'testNInt'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestNInt(java.lang.Integer value) {
      validate(fields()[9], value);
      this.testNInt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'testNInt' field has been set.
      * @return True if the 'testNInt' field has been set, false otherwise.
      */
    public boolean hasTestNInt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'testNInt' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestNInt() {
      testNInt = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'testNLong' field.
      * @return The value.
      */
    public java.lang.Long getTestNLong() {
      return testNLong;
    }

    /**
      * Sets the value of the 'testNLong' field.
      * @param value The value of 'testNLong'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestNLong(java.lang.Long value) {
      validate(fields()[10], value);
      this.testNLong = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'testNLong' field has been set.
      * @return True if the 'testNLong' field has been set, false otherwise.
      */
    public boolean hasTestNLong() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'testNLong' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestNLong() {
      testNLong = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'testNBoolean' field.
      * @return The value.
      */
    public java.lang.Boolean getTestNBoolean() {
      return testNBoolean;
    }

    /**
      * Sets the value of the 'testNBoolean' field.
      * @param value The value of 'testNBoolean'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestNBoolean(java.lang.Boolean value) {
      validate(fields()[11], value);
      this.testNBoolean = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'testNBoolean' field has been set.
      * @return True if the 'testNBoolean' field has been set, false otherwise.
      */
    public boolean hasTestNBoolean() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'testNBoolean' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestNBoolean() {
      testNBoolean = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'testNBytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTestNBytes() {
      return testNBytes;
    }

    /**
      * Sets the value of the 'testNBytes' field.
      * @param value The value of 'testNBytes'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestNBytes(java.nio.ByteBuffer value) {
      validate(fields()[12], value);
      this.testNBytes = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'testNBytes' field has been set.
      * @return True if the 'testNBytes' field has been set, false otherwise.
      */
    public boolean hasTestNBytes() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'testNBytes' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestNBytes() {
      testNBytes = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'testN1Float' field.
      * @return The value.
      */
    public java.lang.Float getTestN1Float() {
      return testN1Float;
    }

    /**
      * Sets the value of the 'testN1Float' field.
      * @param value The value of 'testN1Float'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestN1Float(java.lang.Float value) {
      validate(fields()[13], value);
      this.testN1Float = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'testN1Float' field has been set.
      * @return True if the 'testN1Float' field has been set, false otherwise.
      */
    public boolean hasTestN1Float() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'testN1Float' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestN1Float() {
      testN1Float = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'testN1Double' field.
      * @return The value.
      */
    public java.lang.Double getTestN1Double() {
      return testN1Double;
    }

    /**
      * Sets the value of the 'testN1Double' field.
      * @param value The value of 'testN1Double'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestN1Double(java.lang.Double value) {
      validate(fields()[14], value);
      this.testN1Double = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'testN1Double' field has been set.
      * @return True if the 'testN1Double' field has been set, false otherwise.
      */
    public boolean hasTestN1Double() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'testN1Double' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestN1Double() {
      testN1Double = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'testN1Int' field.
      * @return The value.
      */
    public java.lang.Integer getTestN1Int() {
      return testN1Int;
    }

    /**
      * Sets the value of the 'testN1Int' field.
      * @param value The value of 'testN1Int'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestN1Int(java.lang.Integer value) {
      validate(fields()[15], value);
      this.testN1Int = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'testN1Int' field has been set.
      * @return True if the 'testN1Int' field has been set, false otherwise.
      */
    public boolean hasTestN1Int() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'testN1Int' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestN1Int() {
      testN1Int = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'testN1Long' field.
      * @return The value.
      */
    public java.lang.Long getTestN1Long() {
      return testN1Long;
    }

    /**
      * Sets the value of the 'testN1Long' field.
      * @param value The value of 'testN1Long'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestN1Long(java.lang.Long value) {
      validate(fields()[16], value);
      this.testN1Long = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'testN1Long' field has been set.
      * @return True if the 'testN1Long' field has been set, false otherwise.
      */
    public boolean hasTestN1Long() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'testN1Long' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestN1Long() {
      testN1Long = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'testN1Boolean' field.
      * @return The value.
      */
    public java.lang.Boolean getTestN1Boolean() {
      return testN1Boolean;
    }

    /**
      * Sets the value of the 'testN1Boolean' field.
      * @param value The value of 'testN1Boolean'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestN1Boolean(java.lang.Boolean value) {
      validate(fields()[17], value);
      this.testN1Boolean = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'testN1Boolean' field has been set.
      * @return True if the 'testN1Boolean' field has been set, false otherwise.
      */
    public boolean hasTestN1Boolean() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'testN1Boolean' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestN1Boolean() {
      testN1Boolean = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'testN1Bytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTestN1Bytes() {
      return testN1Bytes;
    }

    /**
      * Sets the value of the 'testN1Bytes' field.
      * @param value The value of 'testN1Bytes'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestN1Bytes(java.nio.ByteBuffer value) {
      validate(fields()[18], value);
      this.testN1Bytes = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'testN1Bytes' field has been set.
      * @return True if the 'testN1Bytes' field has been set, false otherwise.
      */
    public boolean hasTestN1Bytes() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'testN1Bytes' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestN1Bytes() {
      testN1Bytes = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'testDate' field.
      * @return The value.
      */
    public java.lang.Long getTestDate() {
      return testDate;
    }

    /**
      * Sets the value of the 'testDate' field.
      * @param value The value of 'testDate'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestDate(long value) {
      validate(fields()[19], value);
      this.testDate = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'testDate' field has been set.
      * @return True if the 'testDate' field has been set, false otherwise.
      */
    public boolean hasTestDate() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'testDate' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestDate() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'testNDate' field.
      * @return The value.
      */
    public java.lang.Long getTestNDate() {
      return testNDate;
    }

    /**
      * Sets the value of the 'testNDate' field.
      * @param value The value of 'testNDate'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestNDate(java.lang.Long value) {
      validate(fields()[20], value);
      this.testNDate = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'testNDate' field has been set.
      * @return True if the 'testNDate' field has been set, false otherwise.
      */
    public boolean hasTestNDate() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'testNDate' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestNDate() {
      testNDate = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'testN1Date' field.
      * @return The value.
      */
    public java.lang.Long getTestN1Date() {
      return testN1Date;
    }

    /**
      * Sets the value of the 'testN1Date' field.
      * @param value The value of 'testN1Date'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestN1Date(java.lang.Long value) {
      validate(fields()[21], value);
      this.testN1Date = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'testN1Date' field has been set.
      * @return True if the 'testN1Date' field has been set, false otherwise.
      */
    public boolean hasTestN1Date() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'testN1Date' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestN1Date() {
      testN1Date = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'subPojos' field.
      * @return The value.
      */
    public java.util.List<io.schneezey.pojo.TestSubPojo> getSubPojos() {
      return subPojos;
    }

    /**
      * Sets the value of the 'subPojos' field.
      * @param value The value of 'subPojos'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setSubPojos(java.util.List<io.schneezey.pojo.TestSubPojo> value) {
      validate(fields()[22], value);
      this.subPojos = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'subPojos' field has been set.
      * @return True if the 'subPojos' field has been set, false otherwise.
      */
    public boolean hasSubPojos() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'subPojos' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearSubPojos() {
      subPojos = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'testenum' field.
      * @return The value.
      */
    public io.schneezey.pojo.TEST_ENUM getTestenum() {
      return testenum;
    }

    /**
      * Sets the value of the 'testenum' field.
      * @param value The value of 'testenum'.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder setTestenum(io.schneezey.pojo.TEST_ENUM value) {
      validate(fields()[23], value);
      this.testenum = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'testenum' field has been set.
      * @return True if the 'testenum' field has been set, false otherwise.
      */
    public boolean hasTestenum() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'testenum' field.
      * @return This builder.
      */
    public io.schneezey.pojo.TestPojo.Builder clearTestenum() {
      testenum = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestPojo build() {
      try {
        TestPojo record = new TestPojo();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.testPFloat = fieldSetFlags()[1] ? this.testPFloat : (java.lang.Float) defaultValue(fields()[1]);
        record.testPDouble = fieldSetFlags()[2] ? this.testPDouble : (java.lang.Double) defaultValue(fields()[2]);
        record.testPInt = fieldSetFlags()[3] ? this.testPInt : (java.lang.Integer) defaultValue(fields()[3]);
        record.testPLong = fieldSetFlags()[4] ? this.testPLong : (java.lang.Long) defaultValue(fields()[4]);
        record.testPBoolean = fieldSetFlags()[5] ? this.testPBoolean : (java.lang.Boolean) defaultValue(fields()[5]);
        record.testPBytes = fieldSetFlags()[6] ? this.testPBytes : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.testNFloat = fieldSetFlags()[7] ? this.testNFloat : (java.lang.Float) defaultValue(fields()[7]);
        record.testNDouble = fieldSetFlags()[8] ? this.testNDouble : (java.lang.Double) defaultValue(fields()[8]);
        record.testNInt = fieldSetFlags()[9] ? this.testNInt : (java.lang.Integer) defaultValue(fields()[9]);
        record.testNLong = fieldSetFlags()[10] ? this.testNLong : (java.lang.Long) defaultValue(fields()[10]);
        record.testNBoolean = fieldSetFlags()[11] ? this.testNBoolean : (java.lang.Boolean) defaultValue(fields()[11]);
        record.testNBytes = fieldSetFlags()[12] ? this.testNBytes : (java.nio.ByteBuffer) defaultValue(fields()[12]);
        record.testN1Float = fieldSetFlags()[13] ? this.testN1Float : (java.lang.Float) defaultValue(fields()[13]);
        record.testN1Double = fieldSetFlags()[14] ? this.testN1Double : (java.lang.Double) defaultValue(fields()[14]);
        record.testN1Int = fieldSetFlags()[15] ? this.testN1Int : (java.lang.Integer) defaultValue(fields()[15]);
        record.testN1Long = fieldSetFlags()[16] ? this.testN1Long : (java.lang.Long) defaultValue(fields()[16]);
        record.testN1Boolean = fieldSetFlags()[17] ? this.testN1Boolean : (java.lang.Boolean) defaultValue(fields()[17]);
        record.testN1Bytes = fieldSetFlags()[18] ? this.testN1Bytes : (java.nio.ByteBuffer) defaultValue(fields()[18]);
        record.testDate = fieldSetFlags()[19] ? this.testDate : (java.lang.Long) defaultValue(fields()[19]);
        record.testNDate = fieldSetFlags()[20] ? this.testNDate : (java.lang.Long) defaultValue(fields()[20]);
        record.testN1Date = fieldSetFlags()[21] ? this.testN1Date : (java.lang.Long) defaultValue(fields()[21]);
        record.subPojos = fieldSetFlags()[22] ? this.subPojos : (java.util.List<io.schneezey.pojo.TestSubPojo>) defaultValue(fields()[22]);
        record.testenum = fieldSetFlags()[23] ? this.testenum : (io.schneezey.pojo.TEST_ENUM) defaultValue(fields()[23]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestPojo>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestPojo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestPojo>
    READER$ = (org.apache.avro.io.DatumReader<TestPojo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
